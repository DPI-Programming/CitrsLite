@page "/participant/add"
@using CitrsLite.Business.ViewModels.ParticipantViewModels
@using CitrsLite.Business.Enums
@using Microsoft.AspNetCore.Components.Authorization
@inject CitrsLite.Business.Services.ParticipantService participantService
@inject AuthenticationStateProvider authenticationStateProvider
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<EditForm Model=@Model OnValidSubmit="CreateParticipant">
<DataAnnotationsValidator />
    <MudGrid class="py-3" Justify="Justify.Center">
        <MudItem xs="8">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center">Add Participant</MudText>
                    </CardHeaderContent>

                </MudCardHeader>                    
                <MudItem>
                    <MudPaper>
                        @if (success)
                        {
                            <MudText Color="Color.Success" Align="Align.Center">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="Color.Error" Align="Align.Center">
                                <ValidationSummary />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudCardContent>
                    <MudTextField Label="Name" Class="mt-3" @bind-Value="Model.Name" For="@(() => Model.Name)" />
                    <MudSelect T="string" Label="Type" AnchorOrigin="Origin.BottomCenter" @bind-Value="Model.Type" For="@(() => Model.Type)">
                        @foreach (var partType in Enum.GetValues(typeof(ParticipantType)))
                        {
                            <MudSelectItem Value="@partType.ToString()?.Replace("_"," ")">@partType.ToString()?.Replace("_"," ")</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField T="string" Label="Description" Class="mt-3" Variant="Variant.Outlined" Lines="5"
                                  @bind-Value="Model.Description" For="@(() => Model.Description)" />
                    <MudTextField Label="Phone Number" Class="mt-3" @bind-Value="Model.PhoneNumber" For="@(() => Model.PhoneNumber)" />
                    <MudTextField Label="Address" Class="mt-3" @bind-Value="Model.Address" For="@(() => Model.Address)" />
                    <MudTextField Label="City" Class="mt-3" @bind-Value="Model.City" For="@(() => Model.City)" />
                    <MudTextField Label="State" Class="mt-3" @bind-Value="Model.State" For="@(() => Model.State)" />
                    <MudCheckBox Label="Active?" Class="mt-3" @bind-Checked="@Model.IsActive" Color="Color.Primary"></MudCheckBox>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Class="mx-2" OnClick="ClearForm">Clear</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Inject]
    public ParticipantFormViewModel Model { get; set; }
    private bool success;

    public void CreateParticipant(EditContext context)
    {
        participantService.CreateAsync(Model);
        success = true;
        StateHasChanged();
        ClearForm();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        Model.UserName = authState.User.Identity?.Name ?? "Unknown user";
    }

    private void ClearForm()
    {
        Model.Name = string.Empty;
        Model.Type = string.Empty;
        Model.Description = string.Empty;
        Model.PhoneNumber = string.Empty;
        Model.Address = string.Empty;
        Model.City = string.Empty;
        Model.State = "FL";
    }

}
